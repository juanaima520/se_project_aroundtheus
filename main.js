!function(){"use strict";var e=class{constructor(e,t,s,r,i){let{_id:n,name:o,link:a,isLiked:l}=e;this.id=n,this._name=o,this._link=a,this._isLiked=l,this._cardSelector=t,this._handleImageClick=s,this._handleCardDelete=r,this._handleLikeCard=i}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeCard(this)})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._handleCardDelete(this)})),this._cardImage.addEventListener("click",(()=>this._handleImageClick(this._name,this._link)))}getIsLiked(){return this._isLiked}_handleLikeIcon(){this._isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}handleCardDelete(){this._cardElement.remove(),this._cardElement=null}updateIsLiked(e){this._isLiked=e,this._handleLikeIcon()}getView(){return this._cardElement=this._getTemplate(),this._cardImage=this._cardElement.querySelector(".card__image"),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._handleLikeIcon(),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardTitle=this._cardElement.querySelector(".card__title"),this._cardTitle.textContent=this._name,this._setEventListeners(),this._cardElement}},t=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_toggleButtonState(){this._hasInvalidInput(this._inputEls)?this.disabledSubmitButton():(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}disabledSubmitButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_hasInvalidInput(){return!this._inputEls.every((e=>e.validity.valid))}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_setEventListener(){this._inputEls=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputEls.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListener()}};class s{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};_handleModalClose=e=>{(e.target.classList.contains("modal")||e.target.classList.contains("modal__close"))&&this.close()};setEventListeners(){this._popupElement.addEventListener("click",this._handleModalClose)}}var r=class extends s{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._formButton=this._popupElement.querySelector(".modal__button"),this._formButtonText=this._formButton.textContent,this._handleFormSubmit=t,this._inputList=[...this._popupForm.querySelectorAll(".modal__input")]}close(){super.close()}resetForm(){this._popupForm.reset()}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving..";this._formButton.textContent=e?t:this._formButtonText}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}};const i=document.querySelector("#profile-edit-button"),n=document.querySelector("#profile-edit-modal"),o=document.querySelector("#profile-add-button"),a=document.querySelector("#add-card-modal"),l=(document.querySelector("#preview-image-modal"),document.querySelector(".modal__preview-image"),document.querySelector(".modal__image-name"),document.querySelector(".profile__title"),document.querySelector(".profile__description"),document.querySelector("#profile-title-input")),d=document.querySelector("#profile-description-input"),c=(document.querySelector("#card-title-input"),document.querySelector("#card-url-input"),n.querySelector(".modal__form"),a.querySelector(".modal__form"),document.querySelector(".cards__list"),document.querySelector("#card-template").content.firstElementChild,document.querySelector("#avatar-edit-button")),h=(document.querySelector("#modal__form-avatar"),document.querySelector(".profile__image"),new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkResponse(e){return e.ok?e.json():Promise.reject(e.status)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then(this._checkResponse)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then(this._checkResponse)}addNewCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then(this._checkResponse)}editUserInfo(e,t){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}addLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}removeLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"delete",headers:this._headers}).then(this._checkResponse)}updateAvatar(e){return console.log("avatarURL",e),fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"65820eda-9ddf-4d15-8d65-d12582853dbd","Content-Type":"application/json"}})),u=new class{constructor(e){let{nameSelector:t,descriptionSelector:s,avatarSelector:r}=e;this._nameElement=document.querySelector(t),this._descriptionElement=document.querySelector(s),this._avatarElement=document.querySelector(r)}getUserInfo(){return{name:this._nameElement.textContent,description:this._descriptionElement.textContent}}setUserInfo(e){let{name:t,description:s}=e;this._nameElement.textContent=t,this._descriptionElement.textContent=s}changeAvatar(e){this._avatarElement.src=e}}({nameSelector:".profile__title",descriptionSelector:".profile__description",avatarSelector:".profile__image"}),_=new r("#add-card-modal",(e=>{let{name:t,link:s}=e;_.renderLoading(!0),h.addNewCard({name:t,link:s}).then((e=>{y(e),_.close(),_.resetForm(),g["add-card-form"].disabledSubmitButton()})).catch((e=>{console.error(e),alert(`Error ${e}. Could not add card.`)})).finally((()=>{_.renderLoading(!1)}))}));_.setEventListeners();const m=new r("#profile-edit-modal",(e=>{let{title:t,description:s}=e;m.renderLoading(!0),h.editUserInfo(t,s).then((e=>{u.setUserInfo({name:t,description:s}),m.close()})).catch((e=>{console.error(e),alert(`Error ${e}. Could not edit user info.`)})).finally((()=>{m.renderLoading(!1)}))}));m.setEventListeners();const p=new class extends s{constructor(e){super({popupSelector:e}),this._popupImage=this._popupElement.querySelector(".modal__preview-image"),this._popupImageTitle=this._popupElement.querySelector(".modal__image-name")}open(e){this._popupImage.src=e.link,this._popupImage.alt=e.name,this._popupImageTitle.textContent=e.name,super.open()}}("#preview-image-modal");p.setEventListeners();const v=new r("#profile-avatar-modal",(e=>{v.renderLoading(!0),h.updateAvatar(e.link).then((e=>{u.changeAvatar(e.avatar),v.close()})).catch((e=>console.log("Error updating avatar:",e))).finally((()=>{v.renderLoading(!1)}))}));v.setEventListeners(),c.addEventListener("click",(()=>{v.open()}));const E=new class extends s{constructor(e){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._submitButton=this._popupElement.querySelector(".modal__button-confirm")}setConfirmSubmit(e){this._handleFormSubmit=e}setSubmitButtonText(e){this._submitButton.textContent=e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()}))}}("#delete-card-modal");function S(e){E.open(),E.setConfirmSubmit((()=>{E.setSubmitButtonText("Deleting...yay"),h.deleteCard(e.id).then((()=>{E.close(),e.handleCardDelete()})).catch((e=>console.log(e))).finally((()=>{E.setSubmitButtonText("Yes")}))}))}function f(e){e.getIsLiked()?h.removeLike(e.id).then((t=>{e.updateIsLiked(t.isLiked)})).catch((e=>console.log(e))):h.addLike(e.id).then((t=>{e.updateIsLiked(t.isLiked)})).catch((e=>console.log(e)))}function L(e,t){p.open({name:e,link:t})}function y(t){const s=function(t){return new e(t,"#card-template",L,S,f).getView()}(t);b.addItem(s)}E.setEventListeners(),i.addEventListener("click",(()=>{const e=u.getUserInfo();l.value=e.name,d.value=e.description,m.open()})),o.addEventListener("click",(()=>{_.open()}));const g={};var k;k={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible",formSelector:".modal__form"},Array.from(document.querySelectorAll(k.formSelector)).forEach((e=>{const s=new t(k,e),r=e.getAttribute("name");g[r]=s,s.enableValidation()}));const b=new class{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}setItems(e){this._items=e}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){"append"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"prepend")?this._container.append(e):this._container.prepend(e)}}({items:[],renderer:y},".cards__list");Promise.all([h.getInitialCards(),h.getUserInfo()]).then((e=>{let[t,s]=e;b.setItems(t.reverse()),b.renderItems(),u.setUserInfo({name:s.name,description:s.about}),u.changeAvatar(s.avatar)})).catch((e=>{console.error(e)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,